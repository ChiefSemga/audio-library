Audiobook Library Project
A low-cost, 3-tier digital audiobook library application using AWS, Terraform, Python, and MariaDB.
Table of Contents
Overview
Prerequisites
Installation
Configuration
Deployment
Usage
Testing
Troubleshooting
Contributing
License
Overview
This project creates a serverless audiobook library with:
Frontend: Static website hosted on Amazon S3
Backend: AWS Lambda functions with Python
Database: Amazon RDS for MariaDB
Infrastructure: Managed with Terraform
Features:
Upload audiobooks
Browse and search the library
Play audiobooks (basic functionality)
Prerequisites
Ensure you have the following installed and configured:
AWS Account
AWS CLI (configured with your credentials)
Terraform (v1.0.0+)
Python (v3.8+)
Node.js (v14.x+)
Git
Installation
Clone the repository:
text
git clone https://github.com/yourusername/audiobook-library.git
cd audiobook-library
Install Python dependencies:
text
pip install boto3 pymysql
Install Node.js dependencies (if any):
text
npm install
Configuration
AWS CLI configuration:
text
aws configure
Enter your AWS access key ID, secret access key, and preferred region.
Update main.tf:
Replace your-audiobook-library-bucket with a unique S3 bucket name
Update region if necessary
Change MariaDB password in aws_db_instance resource
Update lambda_function.py:
Replace your-audiobook-library-bucket with your S3 bucket name
Update index.html:
Replace YOUR_API_GATEWAY_URL with your API Gateway URL (available after deployment)
Replace YOUR_S3_BUCKET_URL with your S3 bucket URL
Deployment
Initialize Terraform:
text
terraform init
Preview changes:
text
terraform plan
Apply changes:
text
terraform apply
Type 'yes' when prompted.
Note the outputs, including API Gateway URL and S3 bucket URL.
Deploy Lambda function:
text
zip lambda_function.zip lambda_function.py
aws lambda update-function-code --function-name audiobook_library_backend --zip-file fileb://lambda_function.zip
Upload frontend to S3:
text
aws s3 cp index.html s3://your-audiobook-library-bucket/index.html
Configure CORS for API Gateway:
Go to AWS Management Console > API Gateway
Select your API
Click "Actions" > "Enable CORS"
Click "Enable CORS and replace existing CORS headers"
Usage
Access the application:
Open the S3 website URL (from Terraform outputs) in a web browser
Upload an audiobook:
Click "Upload Audiobook"
Fill in the title and author
Select an audio file
Click "Upload"
Browse the library:
Scroll through the list of audiobooks
Click on an audiobook to view details or play
Testing
To test for vulnerabilities using SonarQube:
Install and run SonarQube:
text
docker run -d --name sonarqube -p 9000:9000 sonarqube:latest
Access SonarQube:
Open http://localhost:9000 in a web browser
Log in with default credentials (admin/admin)
Change the password when prompted
Create a new project:
Click "Create new project"
Enter project name and key (e.g., "AudiobookLibrary")
Select "Locally" for analysis method
Generate a token:
In "Provide a token" step, click "Generate"
Save the generated token
Install SonarScanner:
Download and install SonarScanner for your OS
Create sonar-project.properties in project root:
text
sonar.projectKey=AudiobookLibrary
sonar.sources=.
sonar.host.url=http://localhost:9000
sonar.login=YOUR_GENERATED_TOKEN
Run analysis:
text
sonar-scanner
View results:
Return to SonarQube web interface
Navigate to your project
Review identified issues, focusing on "Vulnerabilities" and "Security Hotspots"
Address vulnerabilities:
Review and fix code based on SonarQube's recommendations
Re-run analysis:
text
sonar-scanner
Troubleshooting
AWS Permissions:
Ensure AWS CLI is configured with correct credentials
Verify IAM user has necessary permissions
Terraform Errors:
Check main.tf for syntax errors
Ensure resource names are unique
Verify AWS region is correct
Lambda Function Issues:
Check CloudWatch logs for error messages
Verify environment variables are set correctly
Ensure Lambda has necessary permissions to access S3 and RDS
Database Connection Problems:
Check RDS security group settings
Verify database credentials in Lambda environment variables
S3 Website Access Issues:
Ensure bucket policy allows public read access
Verify correct S3 bucket URL is used
API Gateway Errors:
Check CORS settings
Verify API Gateway URL is correct in frontend code
Contributing
Fork the repository
Create a new branch: git checkout -b feature-branch-name
Make changes and commit: git commit -m 'Add some feature'
Push to the branch: git push origin feature-branch-name
Submit a pull request
License
This project is licensed under the MIT License - see the LICENSE file for details.
